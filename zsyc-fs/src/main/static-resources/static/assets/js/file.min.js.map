{"version":3,"sources":["sha1.js","file.js"],"names":["Sha1","sharedMemory","blocks","this","h0","h1","h2","h3","h4","block","start","bytes","finalized","hashed","first","root","window","NODE_JS","JS_SHA1_NO_NODE_JS","process","versions","node","global","COMMON_JS","JS_SHA1_NO_COMMON_JS","module","exports","AMD","define","amd","HEX_CHARS","split","EXTRA","SHIFT","OUTPUT_TYPES","createOutputMethod","outputType","message","update","createMethod","method","nodeWrap","create","i","length","type","crypto","require","Buffer","nodeMethod","createHash","digest","constructor","ArrayBuffer","Uint8Array","undefined","prototype","notString","code","index","charCodeAt","lastByteIndex","hash","finalize","f","j","t","a","b","c","d","e","hex","toString","array","arrayBuffer","buffer","dataView","DataView","setUint32","sha1","win","image","path","file","upload","m","reader","FileReader","p","Promise","ok","error","addEventListener","result","fetch","uploadHost","toUpperCase","then","res","json","bizContent","id","data","FormData","append","body","readAsArrayBuffer","fileUpload","origin","fingerprint","small","middle"],"mappings":"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","file":"file.min.js","sourcesContent":["/*\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\n *\n * @version 0.4.1\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2016\n * @license MIT\n */\n/*jslint bitwise: true */\n(function() {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.JS_SHA1_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  }\n  var COMMON_JS = !root.JS_SHA1_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\n  var SHIFT = [24, 16, 8, 0];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\n\n  var blocks = [];\n\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Sha1(true).update(message)[outputType]();\n    };\n  };\n\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Sha1();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = require('crypto');\n    var Buffer = require('buffer').Buffer;\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('sha1').update(message, 'utf8').digest('hex');\n      } else if (message.constructor === ArrayBuffer) {\n        message = new Uint8Array(message);\n      } else if (message.length === undefined) {\n        return method(message);\n      }\n      return crypto.createHash('sha1').update(new Buffer(message)).digest('hex');\n    };\n    return nodeMethod;\n  };\n\n  function Sha1(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n    } else {\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    this.h0 = 0x67452301;\n    this.h1 = 0xEFCDAB89;\n    this.h2 = 0x98BADCFE;\n    this.h3 = 0x10325476;\n    this.h4 = 0xC3D2E1F0;\n\n    this.block = this.start = this.bytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  Sha1.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n    var notString = typeof(message) !== 'string';\n    if (notString && message.constructor === root.ArrayBuffer) {\n      message = new Uint8Array(message);\n    }\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if(notString) {\n        for (i = this.start; index < length && i < 64; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < 64; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.block = blocks[16];\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    return this;\n  };\n\n  Sha1.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = this.block;\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[15] = this.bytes << 3;\n    this.hash();\n  };\n\n  Sha1.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;\n    var f, j, t, blocks = this.blocks;\n\n    for(j = 16; j < 80; ++j) {\n      t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\n      blocks[j] =  (t << 1) | (t >>> 31);\n    }\n\n    for(j = 0; j < 20; j += 5) {\n      f = (b & c) | ((~b) & d);\n      t = (a << 5) | (a >>> 27);\n      e = t + f + e + 1518500249 + blocks[j] << 0;\n      b = (b << 30) | (b >>> 2);\n\n      f = (a & b) | ((~a) & c);\n      t = (e << 5) | (e >>> 27);\n      d = t + f + d + 1518500249 + blocks[j + 1] << 0;\n      a = (a << 30) | (a >>> 2);\n\n      f = (e & a) | ((~e) & b);\n      t = (d << 5) | (d >>> 27);\n      c = t + f + c + 1518500249 + blocks[j + 2] << 0;\n      e = (e << 30) | (e >>> 2);\n\n      f = (d & e) | ((~d) & a);\n      t = (c << 5) | (c >>> 27);\n      b = t + f + b + 1518500249 + blocks[j + 3] << 0;\n      d = (d << 30) | (d >>> 2);\n\n      f = (c & d) | ((~c) & e);\n      t = (b << 5) | (b >>> 27);\n      a = t + f + a + 1518500249 + blocks[j + 4] << 0;\n      c = (c << 30) | (c >>> 2);\n    }\n\n    for(; j < 40; j += 5) {\n      f = b ^ c ^ d;\n      t = (a << 5) | (a >>> 27);\n      e = t + f + e + 1859775393 + blocks[j] << 0;\n      b = (b << 30) | (b >>> 2);\n\n      f = a ^ b ^ c;\n      t = (e << 5) | (e >>> 27);\n      d = t + f + d + 1859775393 + blocks[j + 1] << 0;\n      a = (a << 30) | (a >>> 2);\n\n      f = e ^ a ^ b;\n      t = (d << 5) | (d >>> 27);\n      c = t + f + c + 1859775393 + blocks[j + 2] << 0;\n      e = (e << 30) | (e >>> 2);\n\n      f = d ^ e ^ a;\n      t = (c << 5) | (c >>> 27);\n      b = t + f + b + 1859775393 + blocks[j + 3] << 0;\n      d = (d << 30) | (d >>> 2);\n\n      f = c ^ d ^ e;\n      t = (b << 5) | (b >>> 27);\n      a = t + f + a + 1859775393 + blocks[j + 4] << 0;\n      c = (c << 30) | (c >>> 2);\n    }\n\n    for(; j < 60; j += 5) {\n      f = (b & c) | (b & d) | (c & d);\n      t = (a << 5) | (a >>> 27);\n      e = t + f + e - 1894007588 + blocks[j] << 0;\n      b = (b << 30) | (b >>> 2);\n\n      f = (a & b) | (a & c) | (b & c);\n      t = (e << 5) | (e >>> 27);\n      d = t + f + d - 1894007588 + blocks[j + 1] << 0;\n      a = (a << 30) | (a >>> 2);\n\n      f = (e & a) | (e & b) | (a & b);\n      t = (d << 5) | (d >>> 27);\n      c = t + f + c - 1894007588 + blocks[j + 2] << 0;\n      e = (e << 30) | (e >>> 2);\n\n      f = (d & e) | (d & a) | (e & a);\n      t = (c << 5) | (c >>> 27);\n      b = t + f + b - 1894007588 + blocks[j + 3] << 0;\n      d = (d << 30) | (d >>> 2);\n\n      f = (c & d) | (c & e) | (d & e);\n      t = (b << 5) | (b >>> 27);\n      a = t + f + a - 1894007588 + blocks[j + 4] << 0;\n      c = (c << 30) | (c >>> 2);\n    }\n\n    for(; j < 80; j += 5) {\n      f = b ^ c ^ d;\n      t = (a << 5) | (a >>> 27);\n      e = t + f + e - 899497514 + blocks[j] << 0;\n      b = (b << 30) | (b >>> 2);\n\n      f = a ^ b ^ c;\n      t = (e << 5) | (e >>> 27);\n      d = t + f + d - 899497514 + blocks[j + 1] << 0;\n      a = (a << 30) | (a >>> 2);\n\n      f = e ^ a ^ b;\n      t = (d << 5) | (d >>> 27);\n      c = t + f + c - 899497514 + blocks[j + 2] << 0;\n      e = (e << 30) | (e >>> 2);\n\n      f = d ^ e ^ a;\n      t = (c << 5) | (c >>> 27);\n      b = t + f + b - 899497514 + blocks[j + 3] << 0;\n      d = (d << 30) | (d >>> 2);\n\n      f = c ^ d ^ e;\n      t = (b << 5) | (b >>> 27);\n      a = t + f + a - 899497514 + blocks[j + 4] << 0;\n      c = (c << 30) | (c >>> 2);\n    }\n\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n  };\n\n  Sha1.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n\n    return HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n           HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n           HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n           HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n           HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n           HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n           HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n           HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n           HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n           HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n           HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n           HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n           HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\n           HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n           HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n           HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n           HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\n           HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\n           HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\n           HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F];\n  };\n\n  Sha1.prototype.toString = Sha1.prototype.hex;\n\n  Sha1.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n\n    return [\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF\n    ];\n  };\n\n  Sha1.prototype.array = Sha1.prototype.digest;\n\n  Sha1.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(20);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    return buffer;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.sha1 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","!(function(win){\n\t'use strict';\n\n\tvar module = {\n\t\timage: {\n\t\t\tpath: ''\n\t\t},\n\t\tfile: {\n\t\t\tpath: '/file'\n\t\t}\n\t};\n\n\tvar upload = function(file, m){\n\t\tvar reader = new FileReader;\n\t\tvar p = new Promise(function(ok,error){\n\t\t\treader.addEventListener('load',function(){\n\t\t\t\tvar code = sha1(reader.result);\n\t\t\t\tfetch( win.uploadHost + m.path + '/exist?code='+code.toUpperCase())\n\t\t\t\t\t.then( function(res){ return  res.json(); })\n\t\t\t\t\t.then( function(json) {\n\t\t\t\t\t\tif(json.bizContent && json.bizContent.id ){\n\t\t\t\t\t\t\treturn ok(json);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar data = new FormData();\n\t\t\t\t\t\tdata.append('file',file);\n\t\t\t\t\t\treturn fetch( win.uploadHost + m.path + '/upload',{\n\t\t\t\t\t\t\tmethod:'POST',\n\t\t\t\t\t\t\tbody:data\n\t\t\t\t\t\t}).then(function( res ){\n\t\t\t\t\t\t\treturn res.json()\n\t\t\t\t\t\t}).then(function(json){\n\t\t\t\t\t\t\treturn ok(json);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\treader.readAsArrayBuffer(file);\n\t\treturn p;\n\t};\n\n\twin.fileUpload = function(file, m){\n\t\treturn upload(file, module[m || 'image']).then( function(data){\n\t\t\tdata.origin = win.uploadHost +   '/origin/' + data.fingerprint;\n\t\t\tdata.small  = win.uploadHost + '/small/' + data.fingerprint;\n\t\t\tdata.middle = win.uploadHost + '/middle/' + data.fingerprint;\n\t\t\treturn data;\n\t\t});\n\t};\n})(window);"]}